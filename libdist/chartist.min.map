{"version":3,"file":"chartist.min.js","sources":["chartist.js"],"names":["root","factory","exports","module","define","amd","this","Chartist","version","window","document","noop","n","alphaNumerate","String","fromCharCode","extend","target","source","prop","getHeight","svgElement","clientHeight","Math","round","getBBox","height","parentNode","getWidth","clientWidth","width","createSvg","query","svg","container","nodeType","querySelector","undefined","_ctChart","attr","empty","appendChild","_node","getDataArray","data","array","i","series","length","normalizeDataArray","dataArray","j","orderOfMagnitude","value","floor","log","abs","LN10","projectLength","bounds","options","availableHeight","getAvailableHeight","range","chartPadding","axisX","offset","getHighLow","highLow","high","Number","MAX_VALUE","low","getBounds","normalizedData","referenceValue","newMin","newMax","max","min","valueRange","oom","pow","ceil","step","numberOfSteps","axisY","scaleMinSpace","values","push","calculateLabelOffset","labelClass","labelInterpolationFnc","offsetFnc","interpolated","label","elem","dx","dy","text","remove","interpolateData","callback","index","interpolatedValue","polarToCartesian","centerX","centerY","radius","angleInDegrees","angleInRadians","PI","x","cos","y","sin","createChartRect","xAxisOffset","yAxisOffset","x1","y1","x2","y2","createXAxis","chartRect","grid","labels","forEach","pos","showGrid","classNames","horizontal","join","showLabel","createYAxis","vertical","labelAlign","text-anchor","projectPoint","optionsProvider","defaultOptions","responsiveOptions","optionsChangedCallbackFnc","applyOptions","currentOptions","baseOptions","mql","matchMedia","matches","mediaQueryListeners","addListener","catmullRom2bezier","crp","z","d","iLen","p","name","attributes","className","parent","node","Object","keys","key","setAttribute","createElementNS","svgns","_ctSvgElement","addClass","t","createTextNode","firstChild","removeChild","classes","getAttribute","trim","split","names","concat","filter","self","indexOf","removeClass","removedClasses","_parent","Line","createChart","seriesGroups","point","pathCoordinates","showPoint","showLine","svgPathString","lineSmooth","cr","k","l","line","changedOptions","addEventListener","update","Bar","zeroPoint","biPol","periodHalfWidth","bar","seriesBarDistance","barClasses","thin","thick","Pie","totalDataSum","startAngle","total","reduce","previousValue","currentValue","donut","donutWidth","center","endAngle","start","end","arcSweep","path","slice","style"],"mappings":"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","sourcesContent":["(function(root, factory) {\n    if(typeof exports === 'object') {\n        module.exports = factory();\n    }\n    else if(typeof define === 'function' && define.amd) {\n        define([], factory);\n    }\n    else {\n        root['Chartist'] = factory();\n    }\n}(this, function() {\n\n  /* Chartist.js 0.1.10\n   * Copyright © 2014 Gion Kunz\n   * Free to use under the WTFPL license.\n   * http://www.wtfpl.net/\n   */\n  /**\n   * The core module of Chartist that is mainly providing static functions and higher level functions for chart modules.\n   *\n   * @module Chartist.Core\n   */\n\n  // This object is prepared for export via UMD\n  var Chartist = {};\n  Chartist.version = '0.1.10';\n\n  (function (window, document, Chartist) {\n    'use strict';\n\n    // Helps to simplify functional style code\n    Chartist.noop = function (n) {\n      return n;\n    };\n\n    // Generates a-z from number\n    Chartist.alphaNumerate = function (n) {\n      // Limit to a-z\n      return String.fromCharCode(97 + n % 26);\n    };\n\n    // Simple recursive object extend\n    Chartist.extend = function (target, source) {\n      target = target || {};\n      for (var prop in source) {\n        if (typeof source[prop] === 'object') {\n          target[prop] = Chartist.extend(target[prop], source[prop]);\n        } else {\n          target[prop] = source[prop];\n        }\n      }\n      return target;\n    };\n\n    // Get element height / width with fallback to svg BoundingBox or parent container dimensions\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=530985\n    Chartist.getHeight = function (svgElement) {\n      return svgElement.clientHeight || Math.round(svgElement.getBBox().height) || svgElement.parentNode.clientHeight;\n    };\n\n    Chartist.getWidth = function (svgElement) {\n      return svgElement.clientWidth || Math.round(svgElement.getBBox().width) || svgElement.parentNode.clientWidth;\n    };\n\n    // Create Chartist SVG element\n    Chartist.createSvg = function (query, width, height) {\n      // Get dom object from query or if already dom object just use it\n      var container = query.nodeType ? query : document.querySelector(query),\n        svg;\n\n      // If container was not found we throw up\n      if (!container) {\n        throw 'Container node with selector \"' + query + '\" not found';\n      }\n\n      // If already contains our svg object we clear it, set width / height and return\n      if (container._ctChart !== undefined) {\n        svg = container._ctChart.attr({\n          width: width || '100%',\n          height: height || '100%'\n        });\n        // Clear the draw if its already used before so we start fresh\n        svg.empty();\n\n      } else {\n        // Create svg object with width and height or use 100% as default\n        svg = Chartist.svg('svg').attr({\n          width: width || '100%',\n          height: height || '100%'\n        });\n\n        // Add the DOM node to our container\n        container.appendChild(svg._node);\n        container._ctChart = svg;\n      }\n\n      return svg;\n    };\n\n    // Convert data series into plain array\n    Chartist.getDataArray = function (data) {\n      var array = [];\n\n      for (var i = 0; i < data.series.length; i++) {\n        // If the series array contains an object with a data property we will use the property\n        // otherwise the value directly (array or number)\n        array[i] = typeof(data.series[i]) === 'object' && data.series[i].data !== undefined ?\n          data.series[i].data : data.series[i];\n      }\n\n      return array;\n    };\n\n    // Add missing values at the end of the arrays\n    Chartist.normalizeDataArray = function (dataArray, length) {\n      for (var i = 0; i < dataArray.length; i++) {\n        if (dataArray[i].length === length) {\n          continue;\n        }\n\n        for (var j = dataArray[i].length; j < length; j++) {\n          dataArray[i][j] = 0;\n        }\n      }\n\n      return dataArray;\n    };\n\n    Chartist.orderOfMagnitude = function (value) {\n      return Math.floor(Math.log(Math.abs(value)) / Math.LN10);\n    };\n\n    Chartist.projectLength = function (svg, length, bounds, options) {\n      var availableHeight = Chartist.getAvailableHeight(svg, options);\n      return (length / bounds.range * availableHeight);\n    };\n\n    Chartist.getAvailableHeight = function (svg, options) {\n      return Chartist.getHeight(svg._node) - (options.chartPadding * 2) - options.axisX.offset;\n    };\n\n    // Get highest and lowest value of data array\n    Chartist.getHighLow = function (dataArray) {\n      var i,\n        j,\n        highLow = {\n          high: -Number.MAX_VALUE,\n          low: Number.MAX_VALUE\n        };\n\n      for (i = 0; i < dataArray.length; i++) {\n        for (j = 0; j < dataArray[i].length; j++) {\n          if (dataArray[i][j] > highLow.high) {\n            highLow.high = dataArray[i][j];\n          }\n\n          if (dataArray[i][j] < highLow.low) {\n            highLow.low = dataArray[i][j];\n          }\n        }\n      }\n\n      return highLow;\n    };\n\n    // Find the highest and lowest values in a two dimensional array and calculate scale based on order of magnitude\n    Chartist.getBounds = function (svg, normalizedData, options, referenceValue) {\n      var i,\n        newMin,\n        newMax,\n        bounds = Chartist.getHighLow(normalizedData);\n\n      // Overrides of high / low from settings\n      bounds.high = options.high || (options.high === 0 ? 0 : bounds.high);\n      bounds.low = options.low || (options.low === 0 ? 0 : bounds.low);\n\n      // Overrides of high / low based on reference value, it will make sure that the invisible reference value is\n      // used to generate the chart. This is useful when the chart always needs to contain the position of the\n      // invisible reference value in the view i.e. for bipolar scales.\n      if (referenceValue || referenceValue === 0) {\n        bounds.high = Math.max(referenceValue, bounds.high);\n        bounds.low = Math.min(referenceValue, bounds.low);\n      }\n\n      bounds.valueRange = bounds.high - bounds.low;\n      bounds.oom = Chartist.orderOfMagnitude(bounds.valueRange);\n      bounds.min = Math.floor(bounds.low / Math.pow(10, bounds.oom)) * Math.pow(10, bounds.oom);\n      bounds.max = Math.ceil(bounds.high / Math.pow(10, bounds.oom)) * Math.pow(10, bounds.oom);\n      bounds.range = bounds.max - bounds.min;\n      bounds.step = Math.pow(10, bounds.oom);\n      bounds.numberOfSteps = Math.round(bounds.range / bounds.step);\n\n      // Optimize scale step by checking if subdivision is possible based on horizontalGridMinSpace\n      while (true) {\n        var length = Chartist.projectLength(svg, bounds.step / 2, bounds, options);\n        if (length >= options.axisY.scaleMinSpace) {\n          bounds.step /= 2;\n        } else {\n          break;\n        }\n      }\n\n      // Narrow min and max based on new step\n      newMin = bounds.min;\n      newMax = bounds.max;\n      for (i = bounds.min; i <= bounds.max; i += bounds.step) {\n        if (i + bounds.step < bounds.low) {\n          newMin += bounds.step;\n        }\n\n        if (i - bounds.step > bounds.high) {\n          newMax -= bounds.step;\n        }\n      }\n      bounds.min = newMin;\n      bounds.max = newMax;\n      bounds.range = bounds.max - bounds.min;\n\n      bounds.values = [];\n      for (i = bounds.min; i <= bounds.max; i += bounds.step) {\n        bounds.values.push(i);\n      }\n\n      return bounds;\n    };\n\n    Chartist.calculateLabelOffset = function (svg, data, labelClass, labelInterpolationFnc, offsetFnc) {\n      var offset = 0;\n      for (var i = 0; i < data.length; i++) {\n        // If interpolation function returns falsy value we skipp this label\n        var interpolated = labelInterpolationFnc(data[i], i);\n        if (!interpolated && interpolated !== 0) {\n          continue;\n        }\n\n        var label = svg.elem('text', {\n          dx: 0,\n          dy: 0\n        }, labelClass).text('' + interpolated);\n\n        // Check if this is the largest label and update offset\n        offset = Math.max(offset, offsetFnc(label._node));\n        // Remove label after offset Calculation\n        label.remove();\n      }\n\n      return offset;\n    };\n\n    // Used to iterate over array, interpolate using a interpolation function and executing callback (used for rendering)\n    Chartist.interpolateData = function (data, labelInterpolationFnc, callback) {\n      for (var index = 0; index < data.length; index++) {\n        // If interpolation function returns falsy value we skipp this label\n        var interpolatedValue = labelInterpolationFnc(data[index], index);\n        if (!interpolatedValue && interpolatedValue !== 0) {\n          continue;\n        }\n\n        callback(data, index, interpolatedValue);\n      }\n    };\n\n    Chartist.polarToCartesian = function (centerX, centerY, radius, angleInDegrees) {\n      var angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;\n\n      return {\n        x: centerX + (radius * Math.cos(angleInRadians)),\n        y: centerY + (radius * Math.sin(angleInRadians))\n      };\n    };\n\n    // Initialize chart drawing rectangle (area where chart is drawn) x1,y1 = bottom left / x2,y2 = top right\n    Chartist.createChartRect = function (svg, options, xAxisOffset, yAxisOffset) {\n      return {\n        x1: options.chartPadding + yAxisOffset,\n        y1: (options.height || Chartist.getHeight(svg._node)) - options.chartPadding - xAxisOffset,\n        x2: (options.width || Chartist.getWidth(svg._node)) - options.chartPadding,\n        y2: options.chartPadding,\n        width: function () {\n          return this.x2 - this.x1;\n        },\n        height: function () {\n          return this.y1 - this.y2;\n        }\n      };\n    };\n\n    Chartist.createXAxis = function (chartRect, data, grid, labels, options) {\n      // Create X-Axis\n      data.labels.forEach(function (value, index) {\n        var interpolatedValue = options.axisX.labelInterpolationFnc(value, index),\n          pos = chartRect.x1 + chartRect.width() / data.labels.length * index;\n\n        // If interpolated value returns falsey (except 0) we don't draw the grid line\n        if (!interpolatedValue && interpolatedValue !== 0) {\n          return;\n        }\n\n        if (options.axisX.showGrid) {\n          grid.elem('line', {\n            x1: pos,\n            y1: chartRect.y1,\n            x2: pos,\n            y2: chartRect.y2\n          }, [options.classNames.grid, options.classNames.horizontal].join(' '));\n        }\n\n        if (options.axisX.showLabel) {\n          // Use config offset for setting labels of\n          var label = labels.elem('text', {\n            dx: pos + 2\n          }, [options.classNames.label, options.classNames.horizontal].join(' ')).text('' + interpolatedValue);\n\n          // TODO: should use 'alignment-baseline': 'hanging' but not supported in firefox. Instead using calculated height to offset y pos\n          label.attr({\n            dy: chartRect.y1 + Chartist.getHeight(label._node) + options.axisX.offset\n          });\n        }\n      });\n    };\n\n    Chartist.createYAxis = function (chartRect, bounds, grid, labels, offset, options) {\n      // Create Y-Axis\n      bounds.values.forEach(function (value, index) {\n        var interpolatedValue = options.axisY.labelInterpolationFnc(value, index),\n          pos = chartRect.y1 - chartRect.height() / bounds.values.length * index;\n\n        // If interpolated value returns falsey (except 0) we don't draw the grid line\n        if (!interpolatedValue && interpolatedValue !== 0) {\n          return;\n        }\n\n        if (options.axisY.showGrid) {\n          grid.elem('line', {\n            x1: chartRect.x1,\n            y1: pos,\n            x2: chartRect.x2,\n            y2: pos\n          }, [options.classNames.grid, options.classNames.vertical].join(' '));\n        }\n\n        if (options.axisY.showLabel) {\n          labels.elem('text', {\n            dx: options.axisY.labelAlign === 'right' ? offset - options.axisY.offset + options.chartPadding : options.chartPadding,\n            dy: pos - 2,\n            'text-anchor': options.axisY.labelAlign === 'right' ? 'end' : 'start'\n          }, [options.classNames.label, options.classNames.vertical].join(' ')).text('' + interpolatedValue);\n        }\n      });\n    };\n\n    Chartist.projectPoint = function (chartRect, bounds, data, index) {\n      return {\n        x: chartRect.x1 + chartRect.width() / data.length * index,\n        y: chartRect.y1 - chartRect.height() * (data[index] - bounds.min) / (bounds.range + bounds.step)\n      };\n    };\n\n    // Provides options handling functionality with callback for options changes triggered by responsive options and media query matches\n    // TODO: With multiple media queries the handleMediaChange function is triggered too many times, only need one\n    Chartist.optionsProvider = function (defaultOptions, options, responsiveOptions, optionsChangedCallbackFnc) {\n      var baseOptions = Chartist.extend(Chartist.extend({}, defaultOptions), options),\n        currentOptions,\n        mediaQueryListeners = [],\n        i;\n\n      function applyOptions() {\n        currentOptions = Chartist.extend({}, baseOptions);\n\n        if (responsiveOptions) {\n          for (i = 0; i < responsiveOptions.length; i++) {\n            var mql = window.matchMedia(responsiveOptions[i][0]);\n            if (mql.matches) {\n              currentOptions = Chartist.extend(currentOptions, responsiveOptions[i][1]);\n            }\n          }\n        }\n\n        optionsChangedCallbackFnc(currentOptions);\n        return currentOptions;\n      }\n\n      if (!window.matchMedia) {\n        throw 'window.matchMedia not found! Make sure you\\'re using a polyfill.';\n      } else if (responsiveOptions) {\n\n        for (i = 0; i < responsiveOptions.length; i++) {\n          var mql = window.matchMedia(responsiveOptions[i][0]);\n          mql.addListener(applyOptions);\n          mediaQueryListeners.push(mql);\n        }\n      }\n\n      return applyOptions();\n    };\n\n    // http://schepers.cc/getting-to-the-point\n    Chartist.catmullRom2bezier = function (crp, z) {\n      var d = [];\n      for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n        var p = [\n          {x: +crp[i - 2], y: +crp[i - 1]},\n          {x: +crp[i], y: +crp[i + 1]},\n          {x: +crp[i + 2], y: +crp[i + 3]},\n          {x: +crp[i + 4], y: +crp[i + 5]}\n        ];\n        if (z) {\n          if (!i) {\n            p[0] = {x: +crp[iLen - 2], y: +crp[iLen - 1]};\n          } else if (iLen - 4 === i) {\n            p[3] = {x: +crp[0], y: +crp[1]};\n          } else if (iLen - 2 === i) {\n            p[2] = {x: +crp[0], y: +crp[1]};\n            p[3] = {x: +crp[2], y: +crp[3]};\n          }\n        } else {\n          if (iLen - 4 === i) {\n            p[3] = p[2];\n          } else if (!i) {\n            p[0] = {x: +crp[i], y: +crp[i + 1]};\n          }\n        }\n        d.push(\n          [\n            (-p[0].x + 6 * p[1].x + p[2].x) / 6,\n            (-p[0].y + 6 * p[1].y + p[2].y) / 6,\n            (p[1].x + 6 * p[2].x - p[3].x) / 6,\n            (p[1].y + 6 * p[2].y - p[3].y) / 6,\n            p[2].x,\n            p[2].y\n          ]\n        );\n      }\n\n      return d;\n    };\n\n  }(window, document, Chartist));;/**\n   * Chartist SVG module for simple SVG DOM abstraction\n   *\n   * @module Chartist.svg\n   */\n  /* global Chartist */\n  (function(window, document, Chartist) {\n    'use strict';\n\n    Chartist.svg = function(name, attributes, className, parent) {\n\n      var svgns = 'http://www.w3.org/2000/svg';\n\n      function attr(node, attributes) {\n        Object.keys(attributes).forEach(function(key) {\n          node.setAttribute(key, attributes[key]);\n        });\n\n        return node;\n      }\n\n      function elem(svg, name, attributes, className, parentNode) {\n        var node = document.createElementNS(svgns, name);\n        node._ctSvgElement = svg;\n\n        if(parentNode) {\n          parentNode.appendChild(node);\n        }\n\n        if(attributes) {\n          attr(node, attributes);\n        }\n\n        if(className) {\n          addClass(node, className);\n        }\n\n        return node;\n      }\n\n      function text(node, t) {\n        node.appendChild(document.createTextNode(t));\n      }\n\n      function empty(node) {\n        while (node.firstChild) {\n          node.removeChild(node.firstChild);\n        }\n      }\n\n      function remove(node) {\n        node.parentNode.removeChild(node);\n      }\n\n      function classes(node) {\n        return node.getAttribute('class') ? node.getAttribute('class').trim().split(/\\s+/) : [];\n      }\n\n      function addClass(node, names) {\n        node.setAttribute('class',\n          classes(node)\n            .concat(names.trim().split(/\\s+/))\n            .filter(function(elem, pos, self) {\n              return self.indexOf(elem) === pos;\n            }).join(' ')\n        );\n      }\n\n      function removeClass(node, names) {\n        var removedClasses = names.trim().split(/\\s+/);\n\n        node.setAttribute('class', classes(node).filter(function(name) {\n          return removedClasses.indexOf(name) === -1;\n        }).join(' '));\n      }\n\n      return {\n        _node: elem(this, name, attributes, className, parent ? parent._node : undefined),\n        _parent: parent,\n        parent: function() {\n          return this._parent;\n        },\n        attr: function(attributes) {\n          attr(this._node, attributes);\n          return this;\n        },\n        empty: function() {\n          empty(this._node);\n          return this;\n        },\n        remove: function() {\n          remove(this._node);\n          return this;\n        },\n        elem: function(name, attributes, className) {\n          return Chartist.svg(name, attributes, className, this);\n        },\n        text: function(t) {\n          text(this._node, t);\n          return this;\n        },\n        addClass: function(names) {\n          addClass(this._node, names);\n          return this;\n        },\n        removeClass: function(names) {\n          removeClass(this._node, names);\n          return this;\n        },\n        classes: function() {\n          return classes(this._node);\n        }\n      };\n    };\n\n  }(window, document, Chartist));;/**\n   * The Chartist line chart can be used to draw Line or Scatter charts. If used in the browser you can access the global `Chartist` namespace where you find the `Line` function as a main entry point.\n   *\n   * For examples on how to use the line chart please check the examples of the `Chartist.Line` method.\n   *\n   * @module Chartist.Line\n   */\n  /* global Chartist */\n  (function(window, document, Chartist){\n    'use strict';\n\n    /**\n     * This method creates a new line chart and returns an object handle to the internal closure. Currently you can use the returned object only for updating / redrawing the chart.\n     *\n     * @memberof Chartist.Line\n     * @param {string|HTMLElement} query A selector query string or directly a DOM element\n     * @param {object} data The data object that needs to consist of a labels and a series array\n     * @param {object} [options] The options object with options that override the default options. Check the examples for a detailed list.\n     * @param {array} [responsiveOptions] Specify an array of responsive option arrays which are a media query and options object pair => [[mediaQueryString, optionsObject],[more...]]\n     * @return {object} An object with a version and an update method to manually redraw the chart\n     * @function\n     *\n     * @example\n     * // These are the default options of the line chart\n     * var options = {\n     *   // Options for X-Axis\n     *   axisX: {\n     *     // The offset of the labels to the chart area\n     *     offset: 10,\n     *     // If labels should be shown or not\n     *     showLabel: true,\n     *     // If the axis grid should be drawn or not\n     *     showGrid: true,\n     *     // Interpolation function that allows you to intercept the value from the axis label\n     *     labelInterpolationFnc: function(value){return value;}\n     *   },\n     *   // Options for Y-Axis\n     *   axisY: {\n     *     // The offset of the labels to the chart area\n     *     offset: 15,\n     *     // If labels should be shown or not\n     *     showLabel: true,\n     *     // If the axis grid should be drawn or not\n     *     showGrid: true,\n     *     // For the Y-Axis you can set a label alignment property of right or left\n     *     labelAlign: 'right',\n     *     // Interpolation function that allows you to intercept the value from the axis label\n     *     labelInterpolationFnc: function(value){return value;},\n     *     // This value specifies the minimum height in pixel of the scale steps\n     *     scaleMinSpace: 30\n     *   },\n     *   // Specify a fixed width for the chart as a string (i.e. '100px' or '50%')\n     *   width: undefined,\n     *   // Specify a fixed height for the chart as a string (i.e. '100px' or '50%')\n     *   height: undefined,\n     *   // If the line should be drawn or not\n     *   showLine: true,\n     *   // If dots should be drawn or not\n     *   showPoint: true,\n     *   // Specify if the lines should be smoothed (Catmull-Rom-Splines will be used)\n     *   lineSmooth: true,\n     *   // Overriding the natural low of the chart allows you to zoom in or limit the charts lowest displayed value\n     *   low: undefined,\n     *   // Overriding the natural high of the chart allows you to zoom in or limit the charts highest displayed value\n     *   high: undefined,\n     *   // Padding of the chart drawing area to the container element and labels\n     *   chartPadding: 5,\n     *   // Override the class names that get used to generate the SVG structure of the chart\n     *   classNames: {\n     *     label: 'ct-label',\n     *     series: 'ct-series',\n     *     line: 'ct-line',\n     *     point: 'ct-point',\n     *     grid: 'ct-grid',\n     *     vertical: 'ct-vertical',\n     *     horizontal: 'ct-horizontal'\n     *   }\n     * };\n     *\n     * @example\n     * // Create a simple line chart\n     * var data = {\n     *   // A labels array that can contain any sort of values\n     *   labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'],\n     *   // Our series array that contains series objects or in this case series data arrays\n     *   series: [\n     *     [5, 2, 4, 2, 0]\n     *   ]\n     * };\n     *\n     * // As options we currently only set a static size of 300x200 px\n     * var options = {\n     *   width: '300px',\n     *   height: '200px'\n     * };\n     *\n     * // In the global name space Chartist we call the Line function to initialize a line chart. As a first parameter we pass in a selector where we would like to get our chart created. Second parameter is the actual data object and as a third parameter we pass in our options\n     * Chartist.Line('.ct-chart', data, options);\n     *\n     * @example\n     * // Create a line chart with responsive options\n     *\n     * var data = {\n     *   // A labels array that can contain any sort of values\n     *   labels: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n     *   // Our series array that contains series objects or in this case series data arrays\n     *   series: [\n     *     [5, 2, 4, 2, 0]\n     *   ]\n     * };\n     *\n     * // In adition to the regular options we specify responsive option overrides that will override the default configutation based on the matching media queries.\n     * var responsiveOptions = [\n     *   ['screen and (min-width: 641px) and (max-width: 1024px)', {\n     *     showPoint: false,\n     *     axisX: {\n     *       labelInterpolationFnc: function(value) {\n     *         // Will return Mon, Tue, Wed etc. on medium screens\n     *         return value.slice(0, 3);\n     *       }\n     *     }\n     *   }],\n     *   ['screen and (max-width: 640px)', {\n     *     showLine: false,\n     *     axisX: {\n     *       labelInterpolationFnc: function(value) {\n     *         // Will return M, T, W etc. on small screens\n     *         return value[0];\n     *       }\n     *     }\n     *   }]\n     * ];\n     *\n     * Chartist.Line('.ct-chart', data, null, responsiveOptions);\n     *\n     */\n    Chartist.Line = function (query, data, options, responsiveOptions) {\n\n      var defaultOptions = {\n          axisX: {\n            offset: 10,\n            showLabel: true,\n            showGrid: true,\n            labelInterpolationFnc: Chartist.noop\n          },\n          axisY: {\n            offset: 15,\n            showLabel: true,\n            showGrid: true,\n            labelAlign: 'right',\n            labelInterpolationFnc: Chartist.noop,\n            scaleMinSpace: 30\n          },\n          width: undefined,\n          height: undefined,\n          showLine: true,\n          showPoint: true,\n          lineSmooth: true,\n          low: undefined,\n          high: undefined,\n          chartPadding: 5,\n          classNames: {\n            label: 'ct-label',\n            series: 'ct-series',\n            line: 'ct-line',\n            point: 'ct-point',\n            grid: 'ct-grid',\n            vertical: 'ct-vertical',\n            horizontal: 'ct-horizontal'\n          }\n        },\n        currentOptions,\n        svg;\n\n      function createChart(options) {\n        var xAxisOffset,\n          yAxisOffset,\n          seriesGroups = [],\n          bounds,\n          normalizedData = Chartist.normalizeDataArray(Chartist.getDataArray(data), data.labels.length);\n\n        // Create new svg object\n        svg = Chartist.createSvg(query, options.width, options.height);\n\n        // initialize bounds\n        bounds = Chartist.getBounds(svg, normalizedData, options);\n\n        xAxisOffset = options.axisX.offset;\n        if (options.axisX.showLabel) {\n          xAxisOffset += Chartist.calculateLabelOffset(\n            svg,\n            data.labels,\n            [options.classNames.label, options.classNames.horizontal].join(' '),\n            options.axisX.labelInterpolationFnc,\n            Chartist.getHeight\n          );\n        }\n\n        yAxisOffset = options.axisY.offset;\n        if (options.axisY.showLabel) {\n          yAxisOffset += Chartist.calculateLabelOffset(\n            svg,\n            bounds.values,\n            [options.classNames.label, options.classNames.horizontal].join(' '),\n            options.axisY.labelInterpolationFnc,\n            Chartist.getWidth\n          );\n        }\n\n        var chartRect = Chartist.createChartRect(svg, options, xAxisOffset, yAxisOffset);\n        // Start drawing\n        var labels = svg.elem('g'),\n          grid = svg.elem('g');\n\n        Chartist.createXAxis(chartRect, data, grid, labels, options);\n        Chartist.createYAxis(chartRect, bounds, grid, labels, yAxisOffset, options);\n\n        // Draw the series\n        // initialize series groups\n        for (var i = 0; i < data.series.length; i++) {\n          seriesGroups[i] = svg.elem('g');\n          // Use series class from series data or if not set generate one\n          seriesGroups[i].addClass([\n            options.classNames.series,\n            (data.series[i].className || options.classNames.series + '-' + Chartist.alphaNumerate(i))\n          ].join(' '));\n\n          var p = Chartist.projectPoint(chartRect, bounds, normalizedData[i], 0),\n            pathCoordinates = [p.x, p.y],\n            point;\n\n          // First dot we need to add before loop\n          if (options.showPoint) {\n            // Small offset for Firefox to render squares correctly\n            point = seriesGroups[i].elem('line', {\n              // need x & y data for a tooltip\n              x:data.labels[i],\n              y:data.series[0][0],\n              x1: p.x,\n              y1: p.y,\n              x2: p.x + 0.01,\n              y2: p.y\n            }, options.classNames.point);\n          }\n\n          // First point is created, continue with rest\n          for (var j = 1; j < normalizedData[i].length; j++) {\n            p = Chartist.projectPoint(chartRect, bounds, normalizedData[i], j);\n            pathCoordinates.push(p.x, p.y);\n\n            //If we should show points we need to create them now to avoid secondary loop\n            // Small offset for Firefox to render squares correctly\n            if (options.showPoint) {\n              point = seriesGroups[i].elem('line', {\n                // need x & y data for a tooltip\n                x:data.labels[i],\n                y:data.series[i][j],\n                x1: p.x,\n                y1: p.y,\n                x2: p.x + 0.01,\n                y2: p.y\n              }, options.classNames.point);\n            }\n          }\n\n          if (options.showLine) {\n            var svgPathString = 'M' + pathCoordinates[0] + ',' + pathCoordinates[1] + ' ';\n\n            // If smoothed path and path has more than two points then use catmull rom to bezier algorithm\n            if (options.lineSmooth && pathCoordinates.length > 4) {\n\n              var cr = Chartist.catmullRom2bezier(pathCoordinates);\n              for(var k = 0; k < cr.length; k++) {\n                svgPathString += 'C' + cr[k].join();\n              }\n            } else {\n              for(var l = 3; l < pathCoordinates.length; l += 2) {\n                svgPathString += 'L ' + pathCoordinates[l - 1] + ',' + pathCoordinates[l];\n              }\n            }\n\n            seriesGroups[i].elem('path', {\n              d: svgPathString\n            }, options.classNames.line);\n          }\n        }\n      }\n\n      // Obtain current options based on matching media queries (if responsive options are given)\n      // This will also register a listener that is re-creating the chart based on media changes\n      currentOptions = Chartist.optionsProvider(defaultOptions, options, responsiveOptions, function (changedOptions) {\n        currentOptions = changedOptions;\n        createChart(currentOptions);\n      });\n\n      // TODO: Currently we need to re-draw the chart on window resize. This is usually very bad and will affect performance.\n      // This is done because we can't work with relative coordinates when drawing the chart because SVG Path does not\n      // work with relative positions yet. We need to check if we can do a viewBox hack to switch to percentage.\n      // See http://mozilla.6506.n7.nabble.com/Specyfing-paths-with-percentages-unit-td247474.html\n      // Update: can be done using the above method tested here: http://codepen.io/gionkunz/pen/KDvLj\n      // The problem is with the label offsets that can't be converted into percentage and affecting the chart container\n      window.addEventListener('resize', function () {\n        createChart(currentOptions);\n      });\n\n      // Public members\n      return {\n        version: Chartist.version,\n        update: function () {\n          createChart(currentOptions);\n        }\n      };\n    };\n\n  }(window, document, Chartist));\n  ;/**\n   * The bar chart module of Chartist that can be used to draw unipolar or bipolar bar and grouped bar charts.\n   *\n   * @module Chartist.Bar\n   */\n  /* global Chartist */\n  (function(window, document, Chartist){\n    'use strict';\n\n    /**\n     * This method creates a new bar chart and returns an object handle with delegations to the internal closure of the bar chart. You can use the returned object to redraw the chart.\n     *\n     * @memberof Chartist.Bar\n     * @param {string|HTMLElement} query A selector query string or directly a DOM element\n     * @param {object} data The data object that needs to consist of a labels and a series array\n     * @param {object} [options] The options object with options that override the default options. Check the examples for a detailed list.\n     * @param {array} [responsiveOptions] Specify an array of responsive option arrays which are a media query and options object pair => [[mediaQueryString, optionsObject],[more...]]\n     * @return {object} An object with a version and an update method to manually redraw the chart\n     * @function\n     *\n     * @example\n     * // These are the default options of the line chart\n     * var options = {\n     *   // Options for X-Axis\n     *   axisX: {\n     *     // The offset of the labels to the chart area\n     *     offset: 10,\n     *     // If labels should be shown or not\n     *     showLabel: true,\n     *     // If the axis grid should be drawn or not\n     *     showGrid: true,\n     *     // Interpolation function that allows you to intercept the value from the axis label\n     *     labelInterpolationFnc: function(value){return value;}\n     *   },\n     *   // Options for Y-Axis\n     *   axisY: {\n     *     // The offset of the labels to the chart area\n     *     offset: 15,\n     *     // If labels should be shown or not\n     *     showLabel: true,\n     *     // If the axis grid should be drawn or not\n     *     showGrid: true,\n     *     // For the Y-Axis you can set a label alignment property of right or left\n     *     labelAlign: 'right',\n     *     // Interpolation function that allows you to intercept the value from the axis label\n     *     labelInterpolationFnc: function(value){return value;},\n     *     // This value specifies the minimum height in pixel of the scale steps\n     *     scaleMinSpace: 30\n     *   },\n     *   // Specify a fixed width for the chart as a string (i.e. '100px' or '50%')\n     *   width: undefined,\n     *   // Specify a fixed height for the chart as a string (i.e. '100px' or '50%')\n     *   height: undefined,\n     *   // If the line should be drawn or not\n     *   showLine: true,\n     *   // If dots should be drawn or not\n     *   showPoint: true,\n     *   // Specify if the lines should be smoothed (Catmull-Rom-Splines will be used)\n     *   lineSmooth: true,\n     *   // Overriding the natural low of the chart allows you to zoom in or limit the charts lowest displayed value\n     *   low: undefined,\n     *   // Overriding the natural high of the chart allows you to zoom in or limit the charts highest displayed value\n     *   high: undefined,\n     *   // Padding of the chart drawing area to the container element and labels\n     *   chartPadding: 5,\n     *   // Specify the distance in pixel of bars in a group\n     *   seriesBarDistance: 15,\n     *   // Override the class names that get used to generate the SVG structure of the chart\n     *   classNames: {\n     *     label: 'ct-label',\n     *     series: 'ct-series',\n     *     bar: 'ct-bar',\n     *     point: 'ct-point',\n     *     grid: 'ct-grid',\n     *     vertical: 'ct-vertical',\n     *     horizontal: 'ct-horizontal'\n     *   }\n     * };\n     *\n     * @example\n     * // Create a simple bar chart\n     * var data = {\n     *   labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'],\n     *   series: [\n     *     [5, 2, 4, 2, 0]\n     *   ]\n     * };\n     *\n     * // In the global name space Chartist we call the Bar function to initialize a bar chart. As a first parameter we pass in a selector where we would like to get our chart created and as a second parameter we pass our data object.\n     * Chartist.Bar('.ct-chart', data);\n     *\n     * @example\n     * // This example creates a bipolar grouped bar chart where the boundaries are limitted to -10 and 10\n     * Chartist.Bar('.ct-chart', {\n     *   labels: [1, 2, 3, 4, 5, 6, 7],\n     *   series: [\n     *     [1, 3, 2, -5, -3, 1, -6],\n     *     [-5, -2, -4, -1, 2, -3, 1]\n     *   ]\n     * }, {\n     *   seriesBarDistance: 12,\n     *   low: -10,\n     *   heigh: 10\n     * });\n     *\n     */\n    Chartist.Bar = function (query, data, options, responsiveOptions) {\n\n      var defaultOptions = {\n          axisX: {\n            offset: 10,\n            showLabel: true,\n            showGrid: true,\n            labelInterpolationFnc: Chartist.noop\n          },\n          axisY: {\n            offset: 15,\n            showLabel: true,\n            showGrid: true,\n            labelAlign: 'right',\n            labelInterpolationFnc: Chartist.noop,\n            scaleMinSpace: 40\n          },\n          width: undefined,\n          height: undefined,\n          high: undefined,\n          low: undefined,\n          chartPadding: 5,\n          seriesBarDistance: 15,\n          classNames: {\n            label: 'ct-label',\n            series: 'ct-series',\n            bar: 'ct-bar',\n            thin: 'ct-thin',\n            thick: 'ct-thick',\n            grid: 'ct-grid',\n            vertical: 'ct-vertical',\n            horizontal: 'ct-horizontal'\n          }\n        },\n        currentOptions,\n        svg;\n\n      function createChart(options) {\n        var xAxisOffset,\n          yAxisOffset,\n          seriesGroups = [],\n          bounds,\n          normalizedData = Chartist.normalizeDataArray(Chartist.getDataArray(data), data.labels.length);\n\n        // Create new svg element\n        svg = Chartist.createSvg(query, options.width, options.height);\n\n        // initialize bounds\n        bounds = Chartist.getBounds(svg, normalizedData, options, 0);\n\n        xAxisOffset = options.axisX.offset;\n        if (options.axisX.showLabel) {\n          xAxisOffset += Chartist.calculateLabelOffset(\n            svg,\n            data.labels,\n            [options.classNames.label, options.classNames.horizontal].join(' '),\n            options.axisX.labelInterpolationFnc,\n            Chartist.getHeight\n          );\n        }\n\n        yAxisOffset = options.axisY.offset;\n        if (options.axisY.showLabel) {\n          yAxisOffset += Chartist.calculateLabelOffset(\n            svg,\n            bounds.values,\n            [options.classNames.label, options.classNames.horizontal].join(' '),\n            options.axisY.labelInterpolationFnc,\n            Chartist.getWidth\n          );\n        }\n\n        var chartRect = Chartist.createChartRect(svg, options, xAxisOffset, yAxisOffset);\n        // Start drawing\n        var labels = svg.elem('g'),\n          grid = svg.elem('g'),\n        // Projected 0 point\n          zeroPoint = Chartist.projectPoint(chartRect, bounds, [0], 0);\n\n        Chartist.createXAxis(chartRect, data, grid, labels, options);\n        Chartist.createYAxis(chartRect, bounds, grid, labels, yAxisOffset, options);\n\n        // Draw the series\n        // initialize series groups\n        for (var i = 0; i < data.series.length; i++) {\n          // Calculating bi-polar value of index for seriesOffset. For i = 0..4 biPol will be -1.5, -0.5, 0.5, 1.5 etc.\n          var biPol = i - (data.series.length - 1) / 2,\n          // Half of the period with between vertical grid lines used to position bars\n            periodHalfWidth = chartRect.width() / normalizedData[i].length / 2;\n\n          seriesGroups[i] = svg.elem('g');\n          // Use series class from series data or if not set generate one\n          seriesGroups[i].addClass([\n            options.classNames.series,\n            (data.series[i].className || options.classNames.series + '-' + Chartist.alphaNumerate(i))\n          ].join(' '));\n\n          for(var j = 0; j < normalizedData[i].length; j++) {\n            var p = Chartist.projectPoint(chartRect, bounds, normalizedData[i], j),\n              bar;\n\n            // Offset to center bar between grid lines and using bi-polar offset for multiple series\n            // TODO: Check if we should really be able to add classes to the series. Should be handles with SASS and semantic / specific selectors\n            p.x += periodHalfWidth + (biPol * options.seriesBarDistance);\n\n            bar = seriesGroups[i].elem('line', {\n              x1: p.x,\n              y1: zeroPoint.y,\n              x2: p.x,\n              y2: p.y\n            }, options.classNames.bar + (data.series[i].barClasses ? ' ' + data.series[i].barClasses : ''));\n          }\n        }\n      }\n\n      // Obtain current options based on matching media queries (if responsive options are given)\n      // This will also register a listener that is re-creating the chart based on media changes\n      currentOptions = Chartist.optionsProvider(defaultOptions, options, responsiveOptions, function (changedOptions) {\n        currentOptions = changedOptions;\n        createChart(currentOptions);\n      });\n\n      // TODO: Currently we need to re-draw the chart on window resize. This is usually very bad and will affect performance.\n      // This is done because we can't work with relative coordinates when drawing the chart because SVG Path does not\n      // work with relative positions yet. We need to check if we can do a viewBox hack to switch to percentage.\n      // See http://mozilla.6506.n7.nabble.com/Specyfing-paths-with-percentages-unit-td247474.html\n      // Update: can be done using the above method tested here: http://codepen.io/gionkunz/pen/KDvLj\n      // The problem is with the label offsets that can't be converted into percentage and affecting the chart container\n      window.addEventListener('resize', function () {\n        createChart(currentOptions);\n      });\n\n      // Public members\n      return {\n        version: Chartist.version,\n        update: function () {\n          createChart(currentOptions);\n        }\n      };\n    };\n\n  }(window, document, Chartist));\n  ;/**\n   * The pie chart module of Chartist that can be used to draw pie, donut or gauge charts\n   *\n   * @module Chartist.Pie\n   */\n  /* global Chartist */\n  (function(window, document, Chartist) {\n    'use strict';\n\n    /**\n     * This method creates a new pie chart and returns an object that can be used to redraw the chart.\n     *\n     * @memberof Chartist.Pie\n     * @param {string|HTMLElement} query A selector query string or directly a DOM element\n     * @param {object} data The data object in the pie chart needs to have a series property with a one dimensional data array. The values will be normalized against each other and don't necessarily need to be in percentage.\n     * @param {object} [options] The options object with options that override the default options. Check the examples for a detailed list.\n     * @param {array} [responsiveOptions] Specify an array of responsive option arrays which are a media query and options object pair => [[mediaQueryString, optionsObject],[more...]]\n     * @return {object} An object with a version and an update method to manually redraw the chart\n     * @function\n     *\n     * @example\n     * // Default options of the pie chart\n     * var defaultOptions = {\n     *   // Specify a fixed width for the chart as a string (i.e. '100px' or '50%')\n     *   width: undefined,\n     *   // Specify a fixed height for the chart as a string (i.e. '100px' or '50%')\n     *   height: undefined,\n     *   // Padding of the chart drawing area to the container element and labels\n     *   chartPadding: 5,\n     *   // Override the class names that get used to generate the SVG structure of the chart\n     *   classNames: {\n     *     series: 'ct-series',\n     *     slice: 'ct-slice',\n     *     donut: 'ct-donut'\n     *   },\n     *   // The start angle of the pie chart in degrees where 0 points north. A higher value offsets the start angle clockwise.\n     *   startAngle: 0,\n     *   // An optional total you can specify. By specifying a total value, the sum of the values in the series must be this total in order to draw a full pie. You can use this parameter to draw only parts of a pie or gauge charts.\n     *   total: undefined,\n     *   // If specified the donut CSS classes will be used and strokes will be drawn instead of pie slices.\n     *   donut: false,\n     *   // Specify the donut stroke width, currently done in javascript for convenience. May move to CSS styles in the future.\n     *   donutWidth: 60\n     * };\n     *\n     * @example\n     * // Simple pie chart example with four series\n     * Chartist.Pie('.ct-chart', {\n     *   series: [10, 2, 4, 3]\n     * });\n     *\n     * @example\n     * // Drawing a donut chart\n     * Chartist.Pie('.ct-chart', {\n     *   series: [10, 2, 4, 3]\n     * }, {\n     *   donut: true\n     * });\n     *\n     * @example\n     * // Using donut, startAngle and total to draw a gauge chart\n     * Chartist.Pie('.ct-chart', {\n     *   series: [20, 10, 30, 40]\n     * }, {\n     *   donut: true,\n     *   donutWidth: 20,\n     *   startAngle: 270,\n     *   total: 200\n     * });\n     */\n    Chartist.Pie = function (query, data, options, responsiveOptions) {\n\n      var defaultOptions = {\n          width: undefined,\n          height: undefined,\n          chartPadding: 5,\n          classNames: {\n            series: 'ct-series',\n            slice: 'ct-slice',\n            donut: 'ct-donut'\n          },\n          startAngle: 0,\n          total: undefined,\n          donut: false,\n          donutWidth: 60\n        },\n        currentOptions,\n        svg;\n\n      function createChart(options) {\n        var seriesGroups = [],\n          chartRect,\n          radius,\n          totalDataSum,\n          startAngle = options.startAngle,\n          dataArray = Chartist.getDataArray(data);\n\n        // Create SVG.js draw\n        svg = Chartist.createSvg(query, options.width, options.height);\n        // Calculate charting rect\n        chartRect = Chartist.createChartRect(svg, options, 0, 0);\n        // Get biggest circle radius possible within chartRect\n        radius = Math.min(chartRect.width() / 2, chartRect.height() / 2);\n        // Calculate total of all series to get reference value or use total reference from optional options\n        totalDataSum = options.total || dataArray.reduce(function(previousValue, currentValue) {\n          return previousValue + currentValue;\n        }, 0);\n\n        // If this is a donut chart we need to adjust our radius to enable strokes to be drawn inside\n        // Unfortunately this is not possible with the current SVG Spec\n        // See this proposal for more details: http://lists.w3.org/Archives/Public/www-svg/2003Oct/0000.html\n        radius -= options.donut ? options.donutWidth / 2  : 0;\n\n        // Calculate end angle based on total sum and current data value and offset with padding\n        var center = {\n          x: chartRect.x1 + chartRect.width() / 2,\n          y: chartRect.y2 + chartRect.height() / 2\n        };\n\n        // Draw the series\n        // initialize series groups\n        for (var i = 0; i < data.series.length; i++) {\n          seriesGroups[i] = svg.elem('g');\n          // Use series class from series data or if not set generate one\n          seriesGroups[i].addClass([\n            options.classNames.series,\n            (data.series[i].className || options.classNames.series + '-' + Chartist.alphaNumerate(i))\n          ].join(' '));\n\n          var endAngle = startAngle + dataArray[i] / totalDataSum * 360;\n          // If we need to draw the arc for all 360 degrees we need to add a hack where we close the circle\n          // with Z and use 359.99 degrees\n          if(endAngle - startAngle === 360) {\n            endAngle -= 0.01;\n          }\n\n          var start = Chartist.polarToCartesian(center.x, center.y, radius, startAngle - (i === 0 ? 0 : 0.2)),\n            end = Chartist.polarToCartesian(center.x, center.y, radius, endAngle),\n            arcSweep = endAngle - startAngle <= 180 ? '0' : '1',\n            d = [\n              // Start at the end point from the cartesian coordinates\n              'M', end.x, end.y,\n              // Draw arc\n              'A', radius, radius, 0, arcSweep, 0, start.x, start.y\n            ];\n\n          // If regular pie chart (no donut) we add a line to the center of the circle for completing the pie\n          if(options.donut === false) {\n            d.push('L', center.x, center.y);\n          }\n\n          // Create the SVG path\n          // If this is a donut chart we add the donut class, otherwise just a regular slice\n          var path = seriesGroups[i].elem('path', {\n            d: d.join(' ')\n          }, options.classNames.slice + (options.donut ? ' ' + options.classNames.donut : ''));\n\n          // If this is a donut, we add the stroke-width as style attribute\n          if(options.donut === true) {\n            path.attr({\n              'style': 'stroke-width: ' + (+options.donutWidth) + 'px'\n            });\n          }\n\n          // Set next startAngle to current endAngle. Use slight offset so there are no transparent hairline issues\n          // (except for last slice)\n          startAngle = endAngle;\n        }\n      }\n\n      // Obtain current options based on matching media queries (if responsive options are given)\n      // This will also register a listener that is re-creating the chart based on media changes\n      currentOptions = Chartist.optionsProvider(defaultOptions, options, responsiveOptions, function (changedOptions) {\n        currentOptions = changedOptions;\n        createChart(currentOptions);\n      });\n\n      // TODO: Currently we need to re-draw the chart on window resize. This is usually very bad and will affect performance.\n      // This is done because we can't work with relative coordinates when drawing the chart because SVG Path does not\n      // work with relative positions yet. We need to check if we can do a viewBox hack to switch to percentage.\n      // See http://mozilla.6506.n7.nabble.com/Specyfing-paths-with-percentages-unit-td247474.html\n      // Update: can be done using the above method tested here: http://codepen.io/gionkunz/pen/KDvLj\n      // The problem is with the label offsets that can't be converted into percentage and affecting the chart container\n      window.addEventListener('resize', function () {\n        createChart(currentOptions);\n      });\n\n      // Public members\n      return {\n        version: Chartist.version,\n        update: function () {\n          createChart(currentOptions);\n        }\n      };\n    };\n\n  }(window, document, Chartist));\n\n  return Chartist;\n\n}));\n"]}